@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

left to right direction

' =====================
' ERROR CLASSES
' =====================
class NotEnoughSpecialsCardsError {
  +NotEnoughSpecialsCardsError(message: String): NotEnoughSpecialsCardsError
}

class NotEnoughUnitsCardsError {
  +NotEnoughUnitsCardsError(message: String): NotEnoughUnitsCardsError
}

class NotEnoughCardsInDeckError {
  +NotEnoughCardsInDeckError(message: String): NotEnoughCardsInDeckError
}

class InvalidCardAmountError {
  +InvalidCardAmountError(message: String): InvalidCardAmountError
}

class TheCardWasNotFound {
  +TheCardWasNotFound(message: String): TheCardWasNotFound
}

class SectionTypeMismatchError {
  +SectionTypeMismatchError(message: String): SectionTypeMismatchError
}

class GwentFileInvalid {
  +GwentFileInvalid(message: String): GwentFileInvalid
}

class NotUnitCardError {
  +NotUnitCardError(message: String): NotUnitCardError
}

class SectionPlayerMismatchError {
  +SectionPlayerMismatchError(message: String): SectionPlayerMismatchError
}

class SpecialsFileInvalid {
  +SpecialsFileInvalid(message: String): SpecialsFileInvalid
}

class UnitsFileInvalid {
  +UnitsFileInvalid(message: String): UnitsFileInvalid
}

' =====================
' CLASSES THAT USE ERRORS
' =====================
class Deck {
  +Deck(cards: List<Card>): Deck
  +retrieveNRandomCards(n: int): List<Card>
}

class Hand {
  +getNCardsFromDeck(deck: Deck, n: int): void
}

class CardCollection {
  +retrieveCard(card: Card): Card
}

class Validate6SpecialCards {
  -MIN_SPECIALS: int
  +validate(cards: List<Card>): void
}

class Validate15UnitsCards {
  -MIN_UNITS: int
  +validate(cards: List<Card>): void
}

class Card {
  +Card(name: String, description: String, sectionTypes: List<SectionType>): Card
  +play(section: Section): void
  +verifySectionType(sectionType: SectionType): void
}

class GameLoader {
  +loadFromResource(resourcePath: String): Game
}

class DiscardPile {
  +getLastUnitCardFromType(type: SectionType): Card
}

class MoraleBoost {
  +verifyColor(section: Section): void
}

class Special {
  +verifyColor(section: Section): void
}

class Unit {
  +verifyColor(section: Section): void
}

class SpecialsLoader {
  +loadFromResource(resourcePath: String): List<Card>
}

class UnitsLoader {
  +loadFromResource(resourcePath: String): List<Card>
}

' =====================
' RELATIONSHIPS
' =====================

' Error usage relationships
Validate6SpecialCards ..> NotEnoughSpecialsCardsError : throws
Validate15UnitsCards ..> NotEnoughUnitsCardsError : throws

Deck ..> InvalidCardAmountError : throws
Deck ..> NotEnoughCardsInDeckError : throws
Deck ..> NotEnoughSpecialsCardsError : throws
Deck ..> NotEnoughUnitsCardsError : throws

Hand ..> InvalidCardAmountError : throws

CardCollection ..> TheCardWasNotFound : throws

Card ..> SectionTypeMismatchError : throws

GameLoader ..> GwentFileInvalid : throws
DiscardPile ..> NotUnitCardError : throws

MoraleBoost ..> SectionPlayerMismatchError : throws
Unit ..> SectionPlayerMismatchError : throws
Special ..> SectionPlayerMismatchError : throws

SpecialsLoader ..> SpecialsFileInvalid : throws
UnitsLoader ..> UnitsFileInvalid : throws

' Error inheritance
InvalidCardAmountError --|> RuntimeException
NotEnoughSpecialsCardsError --|> RuntimeException
NotEnoughCardsInDeckError --|> RuntimeException
NotEnoughUnitsCardsError --|> RuntimeException
TheCardWasNotFound --|> RuntimeException
SectionTypeMismatchError --|> RuntimeException
GwentFileInvalid --|> RuntimeException
NotUnitCardError --|> RuntimeException
SectionPlayerMismatchError --|> RuntimeException
SpecialsFileInvalid --|> RuntimeException
UnitsFileInvalid --|> RuntimeException

@enduml
