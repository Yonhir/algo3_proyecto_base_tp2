@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

' =====================
' CARD HIERARCHY
' =====================

abstract class Card <<abstract>> {
  #name: String
  #description: String
  #sectionTypes: List<SectionType>
  #playerColor: PlayerColor
  +Card(name: String, description: String, sectionTypes: List<SectionType>): Card
  +{abstract}play(section: Section): void
  +verifySectionType(sectionType: SectionType): void
  +{abstract}setColor(playerColor: PlayerColor): void
  +haveSectionType(sectionType: SectionType) : boolean
  +haveSameColor(color: PlayerColor) : boolean
  +{abstract}verifyColor(color: PlayerColor) : void
  +getName(): String
}

class Unit {
  -basePoints: int
  -currentPoints: int
  -modifiers: List<Modifier>
  -hasHeroModifier : boolean
  +Unit(name: String, description: String, points: int, sectionTypes: List<SectionType>,
  modifiers: List<Modifier>): Unit
  +Unit(name: String, description: String, points: int, sectionType: SectionType,
  modifiers: List<Modifier>): Unit
  +verifyColor(color: PlayerColor) : void
  +setColor(playerColor: PlayerColor): void
  +play(section: Section): void
  +checkHeroModifier() : void
  +hasHeroAsModifier() : boolean
  +calculatePoints(): int
  +resetPoints(): void
  +setPoints(points: int): void
  +haveModifier(modifier: Modifier): boolean
  +strongerThan(unit : Unit) : Unit
  +samePointsAs(unit : Unit) : boolean
}

abstract class Special <<abstract>> {
  +Special(name: String, description: String, sectionTypes: List<SectionType>): Special
  +verifyColor(color: PlayerColor) : void
  +setColor(playerColor: PlayerColor): void
}

' =====================
' RELATIONSHIPS
' =====================

Card <|-- Unit
Card <|-- Special

@enduml