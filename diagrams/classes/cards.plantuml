@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

' =====================
' CARD HIERARCHY
' =====================

abstract class Card <<abstract>> {
  #name: String
  #description: String
  #sectionTypes: List<SectionType>
  +Card(name: String, description: String, sectionTypes: List<SectionType>): Card
  +play(section: Section): void
  +verifySectionType(sectionType: SectionType): void
}

class Unit {
  -basePoints: int
  -currentPoints: int
  -modifiers: List<Modifier>
  -strategy : CalculatePointsStrategy
  +Unit(name: String, description: String, points: int, sectionTypes: List<SectionType>, modifiers: List<Modifier>, strategy CalculatePointsStrategy): Unit
  +calculatePoints(): int
  +resetPoints(): void
  +setPoints(points: int): void
  +haveModifier(modifier: Modifier): boolean
  +play(section: Section): void
  +verifySectionType(sectionType: SectionType): void
}

abstract class Special <<abstract>> {
  +verifySectionType(sectionType: SectionType): void
}

interface CalculatePointsStrategy <<interface>> {
    playIn(section : Section, unit : Unit)
    affectPointsFromWith(unit : Unit, points : int)
}

class HeroStrategy {
}

class CommonStrategy {
}

interface Modifier <<interface>> {
  +apply(row: Row): void
}

class TightBond {
}

class Agile {
}

abstract class Weather <<abstract>> {
  +Weather(name: String, description: String, sectionType: SectionType): Weather
  +play(section: Section): void
  +apply(card: Card, row: Row): void
  +verifySectionType(sectionType: SectionType): void
}

class TorrentialRain {
  +TorrentialRain(name: String, description: String): TorrentialRain
  +apply(card: Card, row: Row): void
}

class ImpenetrableFog {
  +ImpenetrableFog(name: String, description: String): ImpenetrableFog
  +apply(card: Card, row: Row): void
}

class BitingFrost {
  +BitingFrost(name: String, description: String): BitingFrost
}

class Decoy {
  +Decoy(name: String, description: String): Decoy
}

class MoraleBoost{
  +MoraleBoost(name: String, description: String, sectionsType: SectionsType[])
  +play(section: Section): void
}

class TacticalAdvantage {
  +TacticalAdvantage(name: String, description: String): TacticalAdvantage
}

class Scorch {
  +Scorch(name: String, description: String): Scorch
}

' =====================
' RELATIONSHIPS
' =====================

Card <|-- Unit
Card <|-- Special

Card --> "*" SectionType

SectionType <|-- CloseCombatType
SectionType <|-- RangedType
SectionType <|-- SiegeType
SectionType <|-- SpecialType

Unit --> "*" Modifier
Unit o-- CalculatePointsStrategy

CalculatePointsStrategy <|.. HeroStrategy
CalculatePointsStrategy <|.. CommonStrategy

Modifier <|.. TightBond
Modifier <|.. Agile

Special <|-- Decoy
Special <|-- TacticalAdvantage
Special <|-- Scorch
Special <|-- MoraleBoost
Special <|--- Weather

Weather <|-- TorrentialRain
Weather <|-- ImpenetrableFog
Weather <|-- BitingFrost

@enduml
