@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

' =====================
' CARD HIERARCHY
' =====================

abstract class Card <<abstract>> {
  #name: String
  #description: String
  #sectionTypes: List<SectionType>
  #playerColor: PlayerColor
  +Card(name: String, description: String, sectionTypes: List<SectionType>): Card
  +{abstract}play(section: Section): void
  +verifySectionType(sectionType: SectionType): void
  +{abstract}setColor(playerColor: PlayerColor): void
  +haveSectionType(sectionType: SectionType) : boolean
  +haveSameColor(color: PlayerColor) : boolean
  +{abstract}verifyColor(color: PlayerColor) : void
  +getName(): String
}

class Unit {
  -basePoints: int
  -currentPoints: int
  -modifiers: List<Modifier>
  -hasHeroModifier : boolean
  +Unit(name: String, description: String, points: int, sectionTypes: List<SectionType>,
  modifiers: List<Modifier>): Unit
  +Unit(name: String, description: String, points: int, sectionType: SectionType,
  modifiers: List<Modifier>): Unit
  +verifyColor(color: PlayerColor) : void
  +setColor(playerColor: PlayerColor): void
  +play(section: Section): void
  +checkHeroModifier() : void
  +hasHeroAsModifier() : boolean
  +calculatePoints(): int
  +resetPoints(): void
  +setPoints(points: int): void
  +haveModifier(modifier: Modifier): boolean
  +strongerThan(unit : Unit) : Unit
  +samePointsAs(unit : Unit) : boolean
}

abstract class Special <<abstract>> {
  +Special(name: String, description: String, sectionTypes: List<SectionType>): Special
  +verifyColor(color: PlayerColor) : void
  +setColor(playerColor: PlayerColor): void
}

class Scorch {
  +play(section : Section) : void
  +matchesStrongest(unit : Unit) : boolean
  +burnStrongestCardFrom(card : Card, row : Row) : void
  +saveStrongest(unit : Unit) : void
}

interface Modifier <<interface>> {
  +apply(row: Row): void
}

class TightBond {
  +TightBond()
}

class Agile {
  +Agile()
}

class Hero {
  +Hero()
}

class Medic {
  +Medic()
}

class MoraleBoostModifier {
  +MoraleBoostModifier()
}

class Spy {
  +Spy()
}

abstract class Weather <<abstract>> {
  +Weather(name: String, description: String, sectionType: SectionType): Weather
  +play(section: Section): void
  +apply(card: Card, row: Row): void
  +verifySectionType(sectionType: SectionType): void
}

class TorrentialRain {
  +TorrentialRain(name: String, description: String): TorrentialRain
  +apply(card: Card, row: Row): void
}

class ImpenetrableFog {
  +ImpenetrableFog(name: String, description: String): ImpenetrableFog
  +apply(card: Card, row: Row): void
}

class BitingFrost {
  +BitingFrost(name: String, description: String): BitingFrost
}

class Decoy {
  +Decoy(name: String, description: String): Decoy
}

class MoraleBoost{
  +MoraleBoost(name: String, description: String, sectionsType: SectionsType[])
  +play(section: Section): void
}

class TacticalAdvantage {
  +TacticalAdvantage(name: String, description: String): TacticalAdvantage
}

' =====================
' RELATIONSHIPS
' =====================

Card <|-- Unit
Card <|-- Special

Card --> "*" SectionType

SectionType <|-- CloseCombatType
SectionType <|-- RangedType
SectionType <|-- SiegeType
SectionType <|-- SpecialType

Unit --> "*" Modifier

Modifier <|.. TightBond
Modifier <|.. Agile

Special <|-- Decoy
Special <|-- TacticalAdvantage
Special <|-- Scorch
Special <|-- MoraleBoost
Special <|--- Weather

Weather <|-- TorrentialRain
Weather <|-- ImpenetrableFog
Weather <|-- BitingFrost

@enduml
