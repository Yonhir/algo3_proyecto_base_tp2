@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

' =====================
' GAME
' =====================
class Player {
  -name: String
  -health: int
  -discardPile: DiscardPile
  -hand: Hand
  -deck: Deck
  -specialZone: SpecialZone
  -closeCombat: CloseCombat
  -ranged: Ranged
  -siege: Siege
  +Player(name: String, health: int, deck: Deck, specialZone: SpecialZone, closeCombat: CloseCombat, ranged: Ranged, siege: Siege): Player
  +getDiscardPile(): DiscardPile
  +getHand(): Hand
  +calculatePoints(): int
}

interface CardTarget <<interface>> {
  +placeCard(card: Card): void
  +addCard(card: Card): void
}

abstract class CardCollection <<abstract>> {
  #cards: List<Card>
  +CardCollection(cards: List<Card>): CardCollection
  +getCards(): List<Card>
  +addCard(card: Card): void
  +addCards(cards: List<Card>): void
  +retrieveCard(card: Card): Card
  +getCardCount(): int
  +isEmpty(): boolean
}

class Hand {
  +Hand(cards: List<Card>): Hand
  +getNCardsFromDeck(deck: Deck, n: int): void
}

class DiscardPile {
  +DiscardPile(): DiscardPile
  +getLastCard(): Card
  +addCard(card: Card): void
  +addCards(cards: List<Card>): void
}

class Deck {
  +Deck(cards: List<Card>): Deck
  +getCardCount(): int
  +getUnitsCount(): long
  +getSpecialsCount(): long
  -validate(validators: List<DeckValidator>): void
  +retrieveNRandomCards(n: int): List<Card>
}

interface DeckValidator <<interface>> {
  +validate(cards: List<Card>): void
}

class Validate6SpecialCards {
  -MIN_SPECIALS: int
}

class Validate15UnitsCards {
  -MIN_UNITS: int
}

abstract class Row <<abstract>> {
  #cards: List<Card>
  #lastCard: Card
  #currentWeather: Weather
  +placeCard(card: Card): void
  +addCard(card: Card): void
  +calculatePoints(): int
  +discardCards(discardPile: DiscardPile): void
  +addWeather(weather: Weather): void
  +canBePlacedIn(unit: Unit): boolean
  +getCards(): List<Card>
}

class Ranged {
  +canBePlacedIn(unit: Unit): boolean
}

class CloseCombat {
  +canBePlacedIn(unit: Unit): boolean
}

class Siege {
  +canBePlacedIn(unit: Unit): boolean
}

class SpecialZone {
  -closeCombatRows: List<Row>
  -rangedRows: List<Row>
  -siegeRows: List<Row>
  +SpecialZone(closeCombatRows: List<Row>, rangedRows: List<Row>, siegeRows: List<Row>): SpecialZone
  +placeCard(card: Card): void
  +addCard(card: Card): void
  +addCloseCombatWeather(weather: Weather): void
  +addRangedWeather(weather: Weather): void
  +addSiegeWeather(weather: Weather): void
}

abstract class Card <<abstract>> {
  #name: String
  #description: String
  +Card(name: String, description: String): Card
  +getName(): String
  +getDescription(): String
  +play(target: CardTarget): void
  +canBePlaced(target: CardTarget): boolean
}

class Unit {
  -basePoints: int
  -currentPoints: int
  -modifiers: List<Modifier>
  -canBeInCloseCombat: boolean
  -canBeInRanged: boolean
  -canBeInSiege: boolean
  +Unit(name: String, description: String, points: int, closeCombat: boolean, ranged: boolean, siege: boolean, modifiers: List<Modifier>): Unit
  +calculatePoints(): int
  +play(target: CardTarget): void
  +resetPoints(): void
  +setPoints(points: int): void
  +haveModifier(modifier: Modifier): boolean
  +canBeInCloseCombat(): boolean
  +canBeInRanged(): boolean
  +canBeInSiege(): boolean
}

abstract class Special <<abstract>> {
  +Special(name: String, description: String): Special
}

interface Modifier <<interface>> {
  +apply(row: Row): void
}

class TightBond {
}

class Agil {
}

class MoraleBoostModifier {
}

abstract class Weather <<abstract>> {
  +Weather(name: String, description: String): Weather
  +play(target: CardTarget): void
  +apply(card: Card, row: Row): void
  +addToSpecialZone(specialZone: SpecialZone): void
  +canBePlaced(target: CardTarget): boolean
}

class TorrentialRain {
  +TorrentialRain(name: String, description: String): TorrentialRain
  +apply(card: Card, row: Row): void
  +addToSpecialZone(specialZone: SpecialZone): void
}

class ImpenetrableFog {
  +ImpenetrableFog(name: String, description: String): ImpenetrableFog
  +apply(card: Card, row: Row): void
  +addToSpecialZone(specialZone: SpecialZone): void
}

class BitingFrost {
  +BitingFrost(name: String, description: String): BitingFrost
  +apply(card: Card, row: Row): void
  +addToSpecialZone(specialZone: SpecialZone): void
}

' =====================
' EXCEPTIONS
' =====================
class InvalidCardAmountError {
  +InvalidCardAmountError(message: String): InvalidCardAmountError
}

class NotEnoughSpecialsCardsError {
  +NotEnoughSpecialsCardsError(message: String): NotEnoughSpecialsCardsError
}

class NotEnoughtCardsInDeckError {
  +NotEnoughtCardsInDeckError(message: String): NotEnoughtCardsInDeckError
}

class NotEnoughUnitsCardsError {
  +NotEnoughUnitsCardsError(message: String): NotEnoughUnitsCardsError
}

class TheCardWasNotFound {
  +TheCardWasNotFound(message: String): TheCardWasNotFound
}

' =====================
' RELATIONSHIPS
' =====================
Player --> "3" CardCollection
Player --> "3" Row
Player --> "1" SpecialZone

SpecialZone --> "6" Row

CardCollection --> "*" Card
CardCollection <|-- Hand
CardCollection <|-- DiscardPile
CardCollection <|-- Deck

Row <|-- Ranged
Row <|-- CloseCombat
Row <|-- Siege

Row --> "*" Card
Row ..|> CardTarget
SpecialZone ..|> CardTarget

Card <|-- Unit
Card <|-- Special

Unit --> "*" Modifier

Modifier <|.. TightBond
Modifier <|.. Agil
Modifier <|.. MoraleBoostModifier

Special <|-- Weather

Weather <|-- TorrentialRain
Weather <|-- ImpenetrableFog
Weather <|-- BitingFrost

Deck --> "*" DeckValidator
DeckValidator <|.. Validate6SpecialCards
DeckValidator <|.. Validate15UnitsCards

' Exception relationships
InvalidCardAmountError --|> RuntimeException
NotEnoughSpecialsCardsError --|> RuntimeException
NotEnoughtCardsInDeckError --|> RuntimeException
NotEnoughUnitsCardsError --|> RuntimeException
TheCardWasNotFound --|> RuntimeException

@enduml