@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0


abstract class Row <<abstract>> {
  #cards: List<Card>
  #lastCard: Unit
  #currentWeather: Weather
  #sectionType: SectionType
  #discardPile : DiscardPile
  #playerColor: PlayerColor
  +Row(sectionType: SectionType, discardPile: DiscardPile): Row
  +placeCard(card: Card, round: Round): void
  +placeCard(card: Card): void
  +addCard(card: Card): void
  +applyWeather(weather: Weather): void
  +applyScorch(scorch: Scorch): void
  +findStrongestCardWithoutHeroModifier(scorch: Scorch): void
  +findAllCardsWithoutHeroModifierWithSamePoints(scorch: Scorch): List<Card>
  +discardCards(card: Card): void
  +containsCard(card: Card): boolean
  +containsCards(cards: List<Card>): boolean
  +calculatePoints(): int
  +discardCards() : void
  +getLastCard(): Unit
  +serColor(playerColor: PlayerColor): void
  +haveSameSectionType(card: Card): boolean
  +getCardCount(): int
  +getCards(): List<Card>
}

class Ranged {
  +Ranged(discardPile : DiscardPile)
}

class CloseCombat {
  +CloseCombat(discardPile : DiscardPile)
}

class Siege {
  +Siege(discardPile : DiscardPile)
}

interface Section <<interface>> {
  +placeCard(card: Card, round: Round): void
}

abstract class SectionType
class CloseCombatType
class RangedType
class SiegeType
class SpecialType
SectionType <|-- SpecialType
SectionType <|-- CloseCombatType
SectionType <|-- RangedType
SectionType <|-- SiegeType


Row .right.|> Section
Row <|-- Ranged
Row <|-- CloseCombat
Row <|-- Siege
Row --> "1" SectionType

Ranged ---> "1" RangedType
CloseCombat ---> "1" CloseCombatType
Siege ---> "1" SiegeType


@enduml