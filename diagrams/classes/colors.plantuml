@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

abstract class Card <<abstract>> {
  #name: String
  #description: String
  #sectionTypes: List<SectionType>
  +Card(name: String, description: String, sectionTypes: List<SectionType>): Card
  +{abstract}play(section: Section)
  +{abstract}setColor(playerColor: PlayerColor)
  +haveSameColor(color: PlayerColor): boolean
  +{abstract}verifyColor(color: PlayerColor)
}

abstract class Row <<abstract>> {
  #cards: List<Card>
  #lastCard: Card
  #currentWeather: Weather
  #sectionType: SectionType
  #discardPile : DiscardPile
  +Row(sectionType: SectionType, discardPile : DiscardPile): Row
  +calculatePoints(): int
  +placeCard(card: Card, round Round)
  +setColor(playerColor: PlayerColor)
}

class DiscardPile {
  +DiscardPile(): DiscardPile
  +addCard(card: Card)
  +insertCards(cards: List<Card>)
  +getLastCard(): Card
  +setColor(color: PlayerColor)
  +addCardIfHasSameColor(card: Card)
  +getLastUnitCardFromType(row: Row): Card
}

abstract class PlayerColor <<abstract>> {
  +{abstract}swapColor(): PlayerColor
  +equals(object: Object): boolean
}

class Blue {
  +swapColor(): PlayerColor
}

class Red {
  +swapColor(): PlayerColor
}

class Green {
  +swapColor(): PlayerColor
}

Card o-- "1" PlayerColor
Row  o-- "1" PlayerColor
DiscardPile o-- "1" PlayerColor

PlayerColor <|-- Blue
PlayerColor <|-- Red
PlayerColor <|-- Green
@enduml